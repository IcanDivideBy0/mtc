{"version":3,"sources":["modules/app/components/Router.js","modules/app/components/NotFoundPage.js","serviceWorker.js","modules/app/components/AppBar.js","modules/app/components/AppFooter.js","modules/app/theme.js","modules/app/components/App.js","index.js","modules/common/components/Layout.js","modules/common/components/Loader.js","modules/common/index.js"],"names":["LoaderPage","styled","Layout","_templateObject","loadableOpts","fallback","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_common__WEBPACK_IMPORTED_MODULE_7__","wrapFn","Component","props","HomePage","loadable","chunkName","isReady","__webpack_require__","m","this","resolve","requireAsync","e","then","bind","requireSync","id","ContactPage","Router","_ref","match","react_router__WEBPACK_IMPORTED_MODULE_2__","react_router__WEBPACK_IMPORTED_MODULE_3__","exact","path","url","component","NotFoundPage","withRouter","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_common__WEBPACK_IMPORTED_MODULE_1__","Boolean","window","location","hostname","AppBarWrapper","header","StyledNavList","className","Object","objectWithoutProperties","react_default","assign","_templateObject2","StyledNavItem","_ref2","NavLink","_templateObject3","_ref3","classnames","home","pathname","to","AppFooterWrapper","AppFooter_templateObject","AppFooter","theme","gridGutter","breakpoints","AppWrapper","div","App_templateObject","AppContent","App_templateObject2","styled_components_browser_esm","Helmet","rel","href","process","search","name","content","components_AppBar","loadableReady","ReactDOM","hydrate","BrowserRouter","basename","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","fullWidth","map","breakpoint","css","_ref4","Loader"],"mappings":"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","file":"static/js/main.93bf2480.chunk.js","sourcesContent":["import React from \"react\";\nimport { withRouter, Switch, Route } from \"react-router\";\nimport loadable from \"@loadable/component\";\nimport styled from \"styled-components\";\n\nimport { Layout, Loader } from \"modules/common\";\n\nimport NotFoundPage from \"./NotFoundPage\";\n\nconst LoaderPage = styled(Layout)`\n  display: flex;\n  justify-content: center;\n`;\n\nconst loadableOpts = {\n  fallback: (\n    <LoaderPage>\n      <Loader />\n    </LoaderPage>\n  ),\n};\n\n/**\n * Routeâ€™s `component` prop type warning fixed in\n * https://github.com/ReactTraining/react-router/commit/8ecdbd9727cbffe34c41cfe595e67cae2b7ce62f\n * until then wrap the component in a function to avoid useless warning.\n */\n\nconst wrapFn = Component => props => <Component {...props} />;\n\nconst HomePage = wrapFn(\n  loadable(() => import(\"modules/home/components/HomePage\"), loadableOpts)\n);\n\nconst ContactPage = wrapFn(\n  loadable(() => import(\"modules/contact/components/ContactPage\"), loadableOpts)\n);\n\nfunction Router({ match }) {\n  return (\n    <Switch>\n      <Route exact path={match.url} component={HomePage} />\n      <Route exact path={match.url + \"contact\"} component={ContactPage} />\n\n      <Route component={NotFoundPage} />\n    </Switch>\n  );\n}\n\nexport default withRouter(Router);\n","import React from \"react\";\n\nimport { Layout } from \"modules/common\";\n\nexport default function NotFoundPage() {\n  return <Layout>Not found!</Layout>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport styled from \"styled-components\";\n\nconst AppBarWrapper = styled.header`\n  background-color: #fff;\n\n  &.home {\n    background-color: red;\n  }\n`;\n\nconst NavList = ({ className, ...props }) => (\n  <nav className={className}>\n    <ul className=\"nav-list\" {...props} />\n  </nav>\n);\n\nconst StyledNavList = styled(NavList)`\n  .nav-list {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: space-around;\n  }\n`;\n\nconst NavItem = ({ className, ...props }) => (\n  <li className={className}>\n    <NavLink className=\"nav-link\" {...props} />\n  </li>\n);\n\nconst StyledNavItem = styled(NavItem)`\n  flex: 1;\n  display: flex;\n\n  .nav-link {\n    display: block;\n    flex: 1;\n    text-align: center;\n\n    &.active {\n      border-bottom: 1px solid #000;\n    }\n  }\n`;\n\nfunction AppBar({ location }) {\n  return (\n    <AppBarWrapper className={classnames({ home: location.pathname === \"/\" })}>\n      <StyledNavList>\n        <StyledNavItem exact to=\"/\">\n          Home\n        </StyledNavItem>\n        <StyledNavItem exact to=\"/contact\">\n          Contact\n        </StyledNavItem>\n      </StyledNavList>\n    </AppBarWrapper>\n  );\n}\n\nexport default withRouter(AppBar);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Layout } from \"modules/common\";\n\nconst AppFooterWrapper = styled(Layout)``;\n\nexport default function AppFooter() {\n  return <AppFooterWrapper>Hello AppFooter!</AppFooterWrapper>;\n}\n","export default {\n  gridGutter: 16,\n  breakpoints: [720, 840, 960, 1024, 1280],\n};\n","import React from \"react\";\nimport { withRouter } from \"react-router\";\nimport styled from \"styled-components\";\nimport { Helmet } from \"react-helmet\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport AppBar from \"./AppBar\";\nimport AppFooter from \"./AppFooter\";\nimport Router from \"./Router\";\n\nimport theme from \"../theme\";\n\nconst AppWrapper = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst AppContent = styled.div`\n  flex: 1;\n`;\n\nfunction App({ location }) {\n  return (\n    <ThemeProvider theme={theme}>\n      <AppWrapper className=\"App\">\n        <Helmet>\n          <title>MTC</title>\n          <link\n            rel=\"canonical\"\n            href={process.env.PUBLIC_URL + location.pathname + location.search}\n          />\n          <meta name=\"description\" content=\"Medecine traditionnelle chinoise\" />\n        </Helmet>\n\n        <AppBar />\n\n        <AppContent>\n          <Router />\n        </AppContent>\n\n        <AppFooter />\n      </AppWrapper>\n    </ThemeProvider>\n  );\n}\n\nexport default withRouter(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { loadableReady } from \"@loadable/component\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { App } from \"modules/app\";\n\nloadableReady(() => {\n  ReactDOM.hydrate(\n    <BrowserRouter basename=\"/mtc\">\n      <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n  );\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import styled, { css } from \"styled-components\";\n\nexport default styled.div`\n  width: 100%;\n  margin: 0 auto;\n  max-width: calc(100vw - ${({ theme }) => theme.gridGutter * 2}px)\n    ${({ fullWidth }) => fullWidth && \"!important\"};\n\n  ${({ theme }) =>\n    theme.breakpoints.map(\n      breakpoint => css`\n        @media screen and (min-width: ${breakpoint}px) {\n          max-width: calc(\n            ${breakpoint}px - ${({ theme }) => theme.gridGutter * 2}px\n          );\n        }\n      `\n    )};\n`;\n","import React from \"react\";\n\nexport default function Loader() {\n  return <div>Loadingâ€¦</div>;\n}\n","export { default as Layout } from \"./components/Layout\";\nexport { default as Loader } from \"./components/Loader\";\n"],"sourceRoot":""}